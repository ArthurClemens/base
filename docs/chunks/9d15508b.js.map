{"version":3,"file":"9d15508b.js","sources":["../../src/template/hooks/use-link-hash/use-link-hash.js"],"sourcesContent":["import { useState, useEffect } from \"atomico\";\r\nexport function useLinkHash({ selector, root, ref, moveWithScroll }) {\r\n  let [state, setState] = useState();\r\n  useEffect(() => {\r\n    let scroller =\r\n      typeof root == \"string\" ? document.querySelector(root) : root;\r\n\r\n    let element =\r\n      typeof selector == \"string\"\r\n        ? (scroller == window ? document : scroller).querySelector(selector)\r\n        : selector;\r\n\r\n    let targets = [...element.querySelectorAll(\"h1,h2,h3\")];\r\n\r\n    let rootMargin = \"50px 0px -80%\";\r\n\r\n    let observer = new IntersectionObserver(\r\n      ([entrie]) => {\r\n        setState((state) => ({\r\n          ...state,\r\n          titles: titles.map((title) => ({\r\n            ...title,\r\n            intercepted:\r\n              entrie.isIntersecting &&\r\n              entrie.intersectionRatio == 1 &&\r\n              title.target == entrie.target,\r\n          })),\r\n        }));\r\n      },\r\n      {\r\n        root: scroller == window ? null : scroller,\r\n        rootMargin,\r\n        threshold: 1,\r\n      }\r\n    );\r\n    let titles = targets.map((target) => {\r\n      observer.observe(target);\r\n      let level = Number(target.localName.replace(\"h\", \"\")) - 1;\r\n      return {\r\n        level,\r\n        target,\r\n      };\r\n    });\r\n\r\n    let levelMin = Math.min(...titles.map(({ level }) => level));\r\n\r\n    titles = titles.map(({ target, level }) => ({\r\n      level: level - levelMin,\r\n      target,\r\n    }));\r\n\r\n    if (moveWithScroll) {\r\n      let { current } = ref;\r\n      let top = 0;\r\n      while (current) {\r\n        if (!(\"offsetTop\" in current)) break;\r\n        top += current.offsetTop;\r\n        current = current.parentNode;\r\n      }\r\n\r\n      scroller.addEventListener(\"scroll\", () => {\r\n        let y = (scroller.scrollY || scroller.scrollTop) - top;\r\n        setState((state) => ({ ...state, y: y > 0 ? y : 0 }));\r\n      });\r\n    }\r\n\r\n    setState({\r\n      titles,\r\n      scroller,\r\n    });\r\n  }, [selector, root]);\r\n\r\n  return state;\r\n}\r\n"],"names":[],"mappings":";;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}