{"version":3,"file":"todo-app.js","sources":["../src/components/todo-app/todo-app.js"],"sourcesContent":["import { h, customElement, useRef, useProp } from \"atomico\";\r\nimport TodoBrand from \"../todo-brand/todo-brand\";\r\nimport TodoInput from \"../todo-input/todo-input\";\r\nimport TodoButton from \"../todo-button/todo-button\";\r\nimport TodoTask from \"../todo-task/todo-task\";\r\nimport style from \"./todo-app.css\";\r\n\r\nfunction TodoApp() {\r\n  let inputRef = useRef();\r\n  // an alternative to useState, the biggest\r\n  // difference is that this allows you to\r\n  // reflect the status in the selected property, eg:\r\n  let [task, setTask] = useProp(\"task\");\r\n\r\n  return (\r\n    <host shadowDom>\r\n      <style>{style}</style>\r\n      <TodoBrand color=\"white\" size=\"120\"></TodoBrand>\r\n      <header class=\"header -container\">\r\n        <TodoInput class=\"header -input\" ref={inputRef}></TodoInput>\r\n        <TodoButton\r\n          onclick={() => {\r\n            let { value } = inputRef.current;\r\n            if (!value) return;\r\n            setTask([...task, { value, checked: false }]);\r\n            inputRef.current.value = \"\";\r\n          }}\r\n        >\r\n          add task\r\n        </TodoButton>\r\n      </header>\r\n      <section>\r\n        {task.map(({ checked, value }, id) => (\r\n          <TodoTask\r\n            checked={checked}\r\n            onchange={({ target: { checked } }) => {\r\n              //  verify the need to regenerate the list\r\n              if (task[id].checked != checked) {\r\n                setTask(\r\n                  task.map((data, i) => (i == id ? { ...data, checked } : data))\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            {value}\r\n          </TodoTask>\r\n        ))}\r\n      </section>\r\n    </host>\r\n  );\r\n}\r\n\r\nTodoApp.props = {\r\n  task: {\r\n    type: Array,\r\n    value: () => []\r\n  }\r\n};\r\n\r\ncustomElement(\"todo-app\", TodoApp);\r\n"],"names":["TodoApp","inputRef","useRef","task","setTask","useProp","h","style","value","current","checked","map","id","target","data","i","props","type","Array","customElement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAOA,SAASA,OAAT,GAAmB;AACjB,MAAIC,QAAQ,GAAGC,MAAM,EAArB,CADiB;AAGjB;AACA;;AACA,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBC,OAAO,CAAC,MAAD,CAA7B;AAEA,SACEC;AAAM,IAAA,SAAS;AAAf,KACEA,6BAAQC,KAAR,CADF,EAEED,cAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAyB,IAAA,IAAI,EAAC;AAA9B,IAFF,EAGEA;AAAQ,IAAA,KAAK,EAAC;AAAd,KACEA,cAAC,SAAD;AAAW,IAAA,KAAK,EAAC,eAAjB;AAAiC,IAAA,GAAG,EAAEL;AAAtC,IADF,EAEEK,cAAC,UAAD;AACE,IAAA,OAAO,EAAE,MAAM;AACb,UAAI;AAAEE,QAAAA;AAAF,UAAYP,QAAQ,CAACQ,OAAzB;AACA,UAAI,CAACD,KAAL,EAAY;AACZJ,MAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAU;AAAEK,QAAAA,KAAF;AAASE,QAAAA,OAAO,EAAE;AAAlB,OAAV,CAAD,CAAP;AACAT,MAAAA,QAAQ,CAACQ,OAAT,CAAiBD,KAAjB,GAAyB,EAAzB;AACD;AANH,gBAFF,CAHF,EAgBEF,+BACGH,IAAI,CAACQ,GAAL,CAAS,CAAC;AAAED,IAAAA,OAAF;AAAWF,IAAAA;AAAX,GAAD,EAAqBI,EAArB,KACRN,cAAC,QAAD;AACE,IAAA,OAAO,EAAEI,OADX;AAEE,IAAA,QAAQ,EAAE,CAAC;AAAEG,MAAAA,MAAM,EAAE;AAAEH,QAAAA;AAAF;AAAV,KAAD,KAA6B;AACrC;AACA,UAAIP,IAAI,CAACS,EAAD,CAAJ,CAASF,OAAT,IAAoBA,OAAxB,EAAiC;AAC/BN,QAAAA,OAAO,CACLD,IAAI,CAACQ,GAAL,CAAS,CAACG,IAAD,EAAOC,CAAP,KAAcA,CAAC,IAAIH,EAAL,GAAU,EAAE,GAAGE,IAAL;AAAWJ,UAAAA;AAAX,SAAV,GAAiCI,IAAxD,CADK,CAAP;AAGD;AACF;AATH,KAWGN,KAXH,CADD,CADH,CAhBF,CADF;AAoCD;;AAEDR,OAAO,CAACgB,KAAR,GAAgB;AACdb,EAAAA,IAAI,EAAE;AACJc,IAAAA,IAAI,EAAEC,KADF;AAEJV,IAAAA,KAAK,EAAE,MAAM;AAFT;AADQ,CAAhB;AAOAW,aAAa,CAAC,UAAD,EAAanB,OAAb,CAAb"}